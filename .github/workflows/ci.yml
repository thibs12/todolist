# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read
  
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Notify Lambda on commit
      if: github.event_name == 'push'
      run: |
        COMMIT_ID=$(git rev-parse HEAD)
        COMMIT_TIME=$(git show -s --format=%ci "$COMMIT_ID")
        curl -X POST https://ih4ebnhsfe.execute-api.eu-west-1.amazonaws.com/prod/commit \
          -H "Content-Type: application/json" \
          -d "{\"commit_id\": \"$COMMIT_ID\", \"commit_time\": \"$COMMIT_TIME\"}"
          
    - name: Cache NuGet packages
      uses: actions/cache@v2
      with:
        path: ~/.nuget
        key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore src/TodoApi/TodoApi.sln
    - name: Build
      run: dotnet build src/TodoApi/TodoApi.sln
    - name: Test
      run: |
        dotnet test src/TodoApi.UnitTests/TodoApi.UnitTests.csproj
        dotnet test src/TodoApi.IntegrationTests/TodoApi.IntegrationTests.csproj
  lint:
      runs-on: ubuntu-latest
      steps: 
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            # super-linter needs the full git history to get the
            # list of files that changed across commits
            fetch-depth: 0
        - name: Super-Linter
          uses: super-linter/super-linter@v5.7.2
          env: 
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            FILTER_REGEX_EXCLUDE:  .*src/TodoApi.*Dockerfile
  docker:
    runs-on: ubuntu-latest
    needs: [build-and-test,lint]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
# Build and push
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./src/TodoApi
          file: ./src/TodoApi/Dockerfile
          push: true
          tags: thibs12/todolist:latest

# Continuous Deployment - New deployment on ECS
  deploy:
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::891377364444:role/limited-github-access-ecs
          aws-region: eu-west-1
    
      - name: Force new deploy ECS
        if: github.event_name == 'push'
        env:
          CLUSTER_NAME: arn:aws:ecs:eu-west-1:891377364444:cluster/TL-ECS-cluster
          SERVICE_NAME: app-service
        run: |
          aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --force-new-deployment --region eu-west-1

      - name: Wait for tasks to start
        run: |
          echo "Waiting for tasks to start..."
          sleep 25
          
      - name: Notify Lambda on deploy
        if: github.event_name == 'push'
        run: |
          COMMIT_ID=$(git rev-parse HEAD)
          aws lambda invoke --function-name TL-deployFunction \
            --payload "{\"commit_id\": \"$COMMIT_ID\"}" \
            response.json
          cat response.json
